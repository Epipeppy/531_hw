
To avoid having bash expand filepaths, run set -f; to undo run set +f.
stackoverflow.com/questions/27098588/argv-sanitizing-wildcards

get_opt_long() will accept either long or short arguments.
stackoverflow.com/questions/498320/pass-arguments-into-c-program-from-command-line

regex for ipv4:
(?:http.*\/\/)?(?P<host>[^: ]+).?(?P<port>[0-9]*).*


Might just be for man specifically, but still worth referencing.
EXIT STATUS
       0      Successful program execution.

       1      Usage, syntax or configuration file error.

       2      Operational error.

       3      A child process returned a non-zero exit status.

       16     At least one of the pages/files/keywords didn't exist or wasn't matched.

Curl commands:

       -d, --data <data>
              (HTTP MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML  form  and  presses
              the submit button. This will cause curl to pass the data to the server using the content-type application/x-www-form-urlencoded. Compare to -F, --form.

              --data-raw  is  almost  the same but does not have a special interpretation of the @ character. To post data purely binary, you should instead use the --data-binary
              option. To URL-encode the value of a form field you may use --data-urlencode.

              If any of these options is used more than once on the same command line, the data pieces specified will be merged  with  a  separating  &-symbol.  Thus,  using  '-d
              name=daniel -d skill=lousy' would generate a post chunk that looks like 'name=daniel&skill=lousy'.

              If  you start the data with the letter @, the rest should be a file name to read the data from, or - if you want curl to read the data from stdin. Posting data from
              a file named 'foobar' would thus be done with -d, --data @foobar. When -d, --data is told to read from a file like that,  carriage  returns  and  newlines  will  be
              stripped out. If you do not want the @ character to have a special interpretation use --data-raw instead.

              -d, --data can be used several times in a command line

              Examples:
               curl -d "name=curl" https://example.com
               curl -d "name=curl" -d "tool=cmdline" https://example.com
               curl -d @filename https://example.com

              See also --data-binary, --data-urlencode and --data-raw. This option is mutually exclusive to -F, --form and -I, --head and -T, --upload-file.

-G, --get
              When used, this option will make all data specified with -d, --data, --data-binary or --data-urlencode to be used in an HTTP GET request instead of the POST request
              that otherwise would be used. The data will be appended to the URL with a '?' separator.

              If used in combination with -I, --head, the POST data will instead be appended to the URL with a HEAD request.

              Providing -G, --get multiple times has no extra effect.  Disable it again with --no-get.

              Examples:
               curl --get https://example.com
               curl --get -d "tool=curl" -d "age=old" https://example.com
               curl --get -I -d "tool=curl" https://example.com

              See also -d, --data and -X, --request

-I, --head
              (HTTP  FTP  FILE)  Fetch the headers only! HTTP-servers feature the command HEAD which this uses to get nothing but the header of a document. When used on an FTP or
              FILE file, curl displays the file size and last modification time only.

              Providing -I, --head multiple times has no extra effect.  Disable it again with --no-head.

              Example:
               curl -I https://example.com

              See also -G, --get, -v, --verbose and --trace-ascii.

       -H, --header <header/@file>
              (HTTP IMAP SMTP) Extra header to include in information sent. When used within an HTTP request, it is added to the regular request headers.

              For an IMAP or SMTP MIME uploaded mail built with -F, --form options, it is prepended to the resulting MIME document, effectively including it at  the  mail  global
              level. It does not affect raw uploaded mails (Added in 7.56.0).

              You may specify any number of extra headers. Note that if you should add a custom header that has the same name as one of the internal ones curl would use, your ex‐
              ternally set header will be used instead of the internal one.  This allows you to make even trickier stuff than curl would normally do. You should not  replace  in‐
              ternally  set  headers without knowing perfectly well what you are doing. Remove an internal header by giving a replacement without content on the right side of the
              colon, as in: -H "Host:". If you send the custom header with no-value then its header must be terminated with a semicolon, such as -H "X-Custom-Header;" to send "X-
              Custom-Header:".

              curl  will  make  sure that each header you add/replace is sent with the proper end-of-line marker, you should thus not add that as a part of the header content: do
              not add newlines or carriage returns, they will only mess things up for you.

              This option can take an argument in @filename style, which then adds a header for each line in the input file. Using @- will make curl read  the  header  file  from
              stdin. Added in 7.55.0.

              Please  note  that most anti-spam utilities check the presence and value of several MIME mail headers: these are "From:", "To:", "Date:" and "Subject:" among others
              and should be added with this option.

              You need --proxy-header to send custom headers intended for an HTTP proxy. Added in 7.37.0.

              Passing on a "Transfer-Encoding: chunked" header when doing an HTTP request with a request body, will make curl send the data using chunked encoding.

              WARNING: headers set with this option will be set in all HTTP requests - even after redirects are followed, like when told with -L, --location. This can lead to the
              header being sent to other hosts than the original host, so sensitive headers should be used with caution combined with following redirects.

              -H, --header can be used several times in a command line

              Examples:
               curl -H "X-First-Name: Joe" https://example.com
               curl -H "User-Agent: yes-please/2000" https://example.com
               curl -H "Host:" https://example.com
               curl -H @headers.txt https://example.com

              See also -A, --user-agent and -e, --referer.

       -i, --include
              Include the HTTP response headers in the output. The HTTP response headers can include things like server name, cookies, date of  the  document,  HTTP  version  and
              more...

              To view the request headers, consider the -v, --verbose option.

              Providing -i, --include multiple times has no extra effect.  Disable it again with --no-include.

              Example:
               curl -i https://example.com

              See also -v, --verbose.

       --json <data>
              (HTTP) Sends the specified JSON data in a POST request to the HTTP server. --json works as a shortcut for passing on these three options:

               --data [arg]
               --header "Content-Type: application/json"
               --header "Accept: application/json"

              There is no verification that the passed in data is actual JSON or that the syntax is correct.

              If  you  start  the data with the letter @, the rest should be a file name to read the data from, or a single dash (-) if you want curl to read the data from stdin.
              Posting data from a file named 'foobar' would thus be done with --json @foobar and to instead read the data from stdin, use --json @-.

              If this option is used more than once on the same command line, the additional data pieces will be concatenated to the previous before sending.

              The headers this option sets can be overridden with -H, --header as usual.

              --json can be used several times in a command line

              Examples:
               curl --json '{ "drink": "coffe" }' https://example.com
               curl --json '{ "drink":' --json ' "coffe" }' https://example.com
               curl --json @prepared https://example.com
               curl --json @- https://example.com < json.txt

              See also --data-binary and --data-raw. This option is mutually exclusive to -F, --form and -I, --head and -T, --upload-file. Added in 7.82.0.



      -o, --output <file>
              Write output to <file> instead of stdout. If you are using {} or [] to fetch multiple documents, you should quote the URL and you can use '#' followed by  a  number
              in the <file> specifier. That variable will be replaced with the current string for the URL being fetched. Like in:

               curl "http://{one,two}.example.com" -o "file_#1.txt"

              or use several variables like:

               curl "http://{site,host}.host[1-5].com" -o "#1_#2"

              You may use this option as many times as the number of URLs you have. For example, if you specify two URLs on the same command line, you can use it like this:

                curl -o aa example.com -o bb example.net

              and  the  order of the -o options and the URLs does not matter, just that the first -o is for the first URL and so on, so the above command line can also be written
              as

                curl example.com example.net -o aa -o bb

              See also the --create-dirs option to create the local directories dynamically. Specifying the output as '-' (a single dash) will force the output to be done to std‐
              out.

              To suppress response bodies, you can redirect output to /dev/null:

                curl example.com -o /dev/null

              Or for Windows use nul:

                curl example.com -o nul

              -o, --output can be used several times in a command line

              Examples:
               curl -o file https://example.com
               curl "http://{one,two}.example.com" -o "file_#1.txt"
               curl "http://{site,host}.host[1-5].com" -o "#1_#2"
               curl -o file https://example.com -o file2 https://example.net

              See also -O, --remote-name, --remote-name-all and -J, --remote-header-name.


       -X, --request <method>
              (HTTP) Specifies a custom request method to use when communicating with the HTTP server. The specified request method will be used instead of the  method  otherwise
              used  (which  defaults  to  GET).  Read the HTTP 1.1 specification for details and explanations. Common additional HTTP requests include PUT and DELETE, but related
              technologies like WebDAV offers PROPFIND, COPY, MOVE and more.

              Normally you do not need this option. All sorts of GET, HEAD, POST and PUT requests are rather invoked by using dedicated command line options.

              This option only changes the actual word used in the HTTP request, it does not alter the way curl behaves. So for example if you want to make a proper HEAD request,
              using -X HEAD will not suffice. You need to use the -I, --head option.

              The  method string you set with -X, --request will be used for all requests, which if you for example use -L, --location may cause unintended side-effects when curl
              does not change request method according to the HTTP 30x response codes - and similar.

              (FTP) Specifies a custom FTP command to use instead of LIST when doing file lists with FTP.

              (POP3) Specifies a custom POP3 command to use instead of LIST or RETR.

              (IMAP) Specifies a custom IMAP command to use instead of LIST. (Added in 7.30.0)

              (SMTP) Specifies a custom SMTP command to use instead of HELP or VRFY. (Added in 7.34.0)

              If -X, --request is provided several times, the last set value will be used.

              Examples:
               curl -X "DELETE" https://example.com
               curl -X NLST ftp://example.com/

              See also --request-target.


       -T, --upload-file <file>
              This  transfers  the specified local file to the remote URL. If there is no file part in the specified URL, curl will append the local file name. NOTE that you must
              use a trailing / on the last directory to really prove to Curl that there is no file name or curl will think that your last directory name is the remote  file  name
              to use. That will most likely cause the upload operation to fail. If this is used on an HTTP(S) server, the PUT command will be used.

              Use the file name "-" (a single dash) to use stdin instead of a given file.  Alternately, the file name "." (a single period) may be specified instead of "-" to use
              stdin in non-blocking mode to allow reading server output while stdin is being uploaded.

              You can specify one -T, --upload-file for each URL on the command line. Each -T, --upload-file + URL pair specifies what to upload and to where. curl also  supports
              "globbing" of the -T, --upload-file argument, meaning that you can upload multiple files to a single URL by using the same URL globbing style supported in the URL.

              When uploading to an SMTP server: the uploaded data is assumed to be RFC 5322 formatted. It has to feature the necessary set of headers and mail body formatted cor‐
              rectly by the user as curl will not transcode nor encode it further in any way.

              -T, --upload-file can be used several times in a command line

              Examples:
               curl -T file https://example.com
               curl -T "img[1-1000].png" ftp://ftp.example.com/
               curl --upload-file "{file1,file2}" https://example.com

              See also -G, --get and -I, --head.


